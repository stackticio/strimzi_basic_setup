# Chart Info:
#   chart_name: jupiterhub
#   chart_repo: bitnami
#   chart_version: 7.2.12
#   app_version: 4.1.5
#   chart_release_date: 24/07/2024
#   stacktic_update_date: 25/07/2024


## Hub
hub:
  # Credentials
  adminUser: default_username
  password: default_password

   # Keep this section as part of the values yaml. There is a bag with the indent of extraVolumes and extraVolumesMount (changed from 4 to 6)
  configuration: |
    Chart:
      Name: {{ .Chart.Name }}
      Version: {{ .Chart.Version }}
    Release:
      Name: {{ .Release.Name }}
      Namespace: {{ .Release.Namespace }}
      Service: {{ .Release.Service }}
    hub:
      config:
        JupyterHub:
          admin_access: true
          authenticator_class: dummy
          DummyAuthenticator:
          {{- if .Values.hub.password }}
            password: {{ .Values.hub.password | quote }}
          {{- else }}
            password: {{ randAlphaNum 10 | quote }}
          {{- end }}
          Authenticator:
            admin_users:
              - {{ .Values.hub.adminUser }}
      cookieSecret:
      debug:
        enabled: true
      concurrentSpawnLimit: 64
      consecutiveFailureLimit: 5
      activeServerLimit:
      db:
        type: postgres
        url: postgresql://{{ ternary .Values.postgresql.auth.username .Values.externalDatabase.user .Values.postgresql.enabled }}@{{ ternary (include "jupyterhub.postgresql.fullname" .) .Values.externalDatabase.host .Values.postgresql.enabled }}:{{ ternary "5432" .Values.externalDatabase.port .Values.postgresql.enabled }}/{{ ternary .Values.postgresql.auth.database .Values.externalDatabase.database .Values.postgresql.enabled }}
      services: {{- include "common.tplvalues.render" ( dict "value" .Values.hub.services "context" $ ) | nindent 8 }}
      allowNamedServers: false
      namedServerLimitPerUser:
      {{- if .Values.hub.metrics.serviceMonitor.enabled }}
      authenticatePrometheus: {{ .Values.hub.metrics.authenticatePrometheus }}
      {{- end }}
      redirectToServer:
      shutdownOnLogout:
    singleuser:
      podNameTemplate: {{ include "common.names.fullname" . }}-jupyter-{username}
      {{- if .Values.singleuser.tolerations }}
      extraTolerations: {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.tolerations "context" $) | nindent 4 }}
      {{- end }}
      {{- if .Values.singleuser.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.nodeSelector "context" $) | nindent 4 }}
      {{- end }}
      networkTools:
        image:
          name: {{ include "jupyterhub.hubconfiguration.imageEntry" ( dict "imageRoot" .Values.auxiliaryImage "global" .Values.global) }}
          tag: {{ .Values.auxiliaryImage.tag }}
          digest: {{ .Values.auxiliaryImage.digest }}
          pullPolicy: {{ .Values.auxiliaryImage.pullPolicy }}
          pullSecrets: {{- include "jupyterhub.imagePullSecrets.list" . | nindent 8 }}
      cloudMetadata:
        blockWithIptables: false
      events: true
      extraAnnotations:
        {{- if .Values.commonAnnotations }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
        {{- end }}
        {{- if .Values.singleuser.podAnnotations }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.podAnnotations "context" $ ) | nindent 4 }}
        {{- end }}
      extraLabels:
        hub.jupyter.org/network-access-hub: "true"
        app.kubernetes.io/component: singleuser
        {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
        {{- if .Values.singleuser.podLabels }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.podLabels "context" $ ) | nindent 4 }}
        {{- end }}
      {{- if .Values.singleuser.extraEnvVars }}
      extraEnv: {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.extraEnvVars "context" $ ) | nindent 4 }}
      {{- end }}
      {{- if .Values.singleuser.lifecycleHooks }}
      lifecycleHooks: {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.lifecycleHooks "context" $ ) | nindent 4 }}
      {{- end }}
      {{- if .Values.singleuser.initContainers }}
      initContainers: {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.initContainers "context" $ ) | nindent 4 }}
      {{- end }}
      {{- if .Values.singleuser.sidecars }}
      extraContainers: {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.sidecars "context" $ ) | nindent 4 }}
      {{- end }}
      {{- if .Values.singleuser.containerSecurityContext.enabled }}
      uid: {{ .Values.singleuser.containerSecurityContext.runAsUser }}
      {{- end }}
      {{- if .Values.singleuser.podSecurityContext.enabled }}
      fsGid: {{ .Values.singleuser.podSecurityContext.fsGroup }}
      {{- end }}
      {{- if .Values.singleuser.containerSecurityContext.enabled }}
      containerSecurityContext: {{- omit .Values.singleuser.containerSecurityContext "enabled" | toYaml | nindent 4 }}
      {{- end }}
      {{- if .Values.singleuser.podSecurityContext.enabled }}
      podSecurityContext: {{- omit .Values.singleuser.podSecurityContext "enabled" | toYaml | nindent 4 }}
      {{- end }}
      serviceAccountName: {{ template "jupyterhub.singleuserServiceAccountName" . }}
      automountServiceAccountToken: {{ .Values.singleuser.automountServiceAccountToken }}
      storage:
        {{- if .Values.singleuser.persistence.enabled }}
        type: dynamic
        {{- else }}
        type: none
        {{- end }}
        extraLabels:
          app.kubernetes.io/component: singleuser
          {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 6 }}
        extraVolumes:
          - name: empty-dir
            emptyDir: {}
          {{- if .Values.singleuser.extraVolumes }}
          {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.extraVolumes "context" $ ) | nindent 6 }}
          {{- end }}
        extraVolumeMounts:
          - name: empty-dir
            mountPath: /tmp
            subPath: tmp-dir
          {{- if .Values.singleuser.extraVolumeMounts }}
          {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.extraVolumeMounts "context" $ ) | nindent 6 }}
          {{- end }}
        capacity: {{ .Values.singleuser.persistence.size }}
        homeMountPath: {{ .Values.singleuser.notebookDir }}
        dynamic:
          {{ include "jupyterhub.storage.class" (dict "persistence" .Values.singleuser.persistence "global" .Values.global) }}
          pvcNameTemplate: {{ include "common.names.fullname" . }}-claim-{username}{servername}
          volumeNameTemplate: {{ include "common.names.fullname" . }}-volume-{username}{servername}
          storageAccessModes: {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.persistence.accessModes "context" $ ) | nindent 8 }}
      image:
        name: {{ include "jupyterhub.hubconfiguration.imageEntry" ( dict "imageRoot" .Values.singleuser.image "global" .Values.global) }}
        tag: {{ .Values.singleuser.image.tag }}
        digest: {{ .Values.singleuser.image.digest }}
        pullPolicy: {{ .Values.singleuser.image.pullPolicy }}
        pullSecrets: {{- include "jupyterhub.imagePullSecrets.list" . | nindent 4 }}
      startTimeout: 300
      {{- include "jupyterhub.singleuser.resources" . | nindent 2 }}
      {{- if .Values.singleuser.command }}
      cmd: {{- include "common.tplvalues.render" (dict "value" .Values.singleuser.command "context" $) | nindent 4 }}
      {{- else }}
      cmd: jupyterhub-singleuser
      {{- end }}
      defaultUrl:
      {{- if .Values.singleuser.profileList }}
      profileList: {{- include "common.tplvalues.render" ( dict "value" .Values.singleuser.profileList "context" $) | nindent 4 }}
      {{- end }}
    cull:
      enabled: true
      users: false
      removeNamedServers: false
      timeout: 3600
      every: 600
      concurrency: 10
      maxAge: 0
  

  # Network Policy
  networkPolicy:
    enabled: false

  # Resources
  resources:
    requests:
      cpu: 250m
      memory: 256Mi
    limits:
      cpu: 750m
      memory: 768Mi
  


## Proxy
proxy:
  # Network Policy
  networkPolicy:
    enabled: false

  # Resources
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 150m
      memory: 192Mi
  

## Single User
singleuser:
  # Network Policy
  networkPolicy:
    enabled: false

  # Resources
  resources:
    requests:
      cpu: 250m
      memory: 512Mi
    limits:
      cpu: 750m
      memory: 2Gi

  # Environment variables
  extraEnvVars:

  # Volume mounts
  extraVolumes:

  

## Image Puller
imagePuller:
  # Network Policy
  networkPolicy:
    enabled: false

############## Postgresql sub chart ##############:
postgresql:
  enabled: true

  # PostgreSQL architecture
  architecture: standalone

  # Replication configuration
  replication:
    synchronousCommit: "off"
    numSynchronousReplicas: 0

  # Credentials
  auth:
    username: bn_jupyterhub
    password: jupyter_password
    database: bitnami_jupyterhub

  # Metrics
  

  ## Primary pods
  primary:
    # Logging
    # extendedConfiguration: |
    #   log_min_messages = DEBUG1
    #   log_statement = 'all'
    
    # Resources
    resources:
      requests:
        cpu: 250m
        memory: 256Mi
      limits:
        cpu: 375m
        memory: 384Mi

    # Persistence storage
    persistence:
      enabled: true
      size: 8Gi

    # Anti-Affinity - Prefer to not schedule primary postgresql on the same node as read
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/instance
                    operator: In
                    values:
                      - keycloak
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                      - postgresql
                  - key: app.kubernetes.io/component
                    operator: In
                    values:
                      - read
              topologyKey: kubernetes.io/hostname

    # Postgresql network policy
    networkPolicy:
      enabled: false

  ## Read replica pods
  readReplicas:
    # Logging
    # extendedConfiguration: |
    #   log_min_messages = DEBUG1
    #   log_statement = 'all'

    # Replicas
    replicaCount: 1

    # Resources
    resources:
      requests:
        cpu: 250m
        memory: 256Mi
      limits:
        cpu: 375m
        memory: 384Mi

    # Persistence storage
    persistence:
      enabled: true
      size: 8Gi

    # Anti-Affinity - Prefer to not schedule read postgresql on the same node as primary or another read
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/instance
                    operator: In
                    values:
                      - keycloak
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                      - postgresql
                  - key: app.kubernetes.io/component
                    operator: In
                    values:
                      - primary
                      - read
              topologyKey: kubernetes.io/hostname

    # Postgresql network policy
    networkPolicy:
      enabled: false